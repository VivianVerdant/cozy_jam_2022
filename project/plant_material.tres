[gd_resource type="ShaderMaterial" load_steps=14 format=2]

[ext_resource path="res://models/plant-pack/bush_01.png" type="Texture" id=2]

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=6]
constant = 0.5

[sub_resource type="VisualShaderNodeScalarConstant" id=7]
constant = -0.007

[sub_resource type="VisualShaderNodeScalarConstant" id=8]
constant = 0.023

[sub_resource type="VisualShaderNodeScalarConstant" id=9]
constant = 0.96

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 0.998

[sub_resource type="VisualShaderNodeScalarConstant" id=17]
constant = 0.5

[sub_resource type="VisualShaderNodeTexture" id=11]
output_port_for_preview = 1
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeInput" id=13]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id=14]
size = Vector2( 849, 693.5 )
expression = "new_uv = vec3(
	scale_x * (cos(rotation) * (uv.x - mid_x) + sin(rotation) * (uv.y - mid_x) + mid_x)+offset_x,
	scale_y * (cos(rotation) * (uv.y - mid_y) - sin(rotation) * (uv.x - mid_y) + mid_y)+offset_y,0);"

[sub_resource type="VisualShaderNodeScalarConstant" id=15]
constant = 0.205

[sub_resource type="VisualShader" id=16]
code = "shader_type spatial;
render_mode depth_draw_alpha_prepass, specular_schlick_ggx;

uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// Scalar:8
	float n_out8p0 = 0.205000;

// Scalar:11
	float n_out11p0 = 0.500000;

// Scalar:13
	float n_out13p0 = -0.007000;

// Scalar:14
	float n_out14p0 = 0.023000;

// Scalar:12
	float n_out12p0 = 0.500000;

// Scalar:16
	float n_out16p0 = 0.998000;

// Scalar:15
	float n_out15p0 = 0.960000;

// Expression:7
	vec3 n_out7p0;
	n_out7p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out7p0 = vec3(
			n_out16p0 * (cos(n_out8p0) * (n_out4p0.x - n_out11p0) + sin(n_out8p0) * (n_out4p0.y - n_out11p0) + n_out11p0)+n_out13p0,
			n_out15p0 * (cos(n_out8p0) * (n_out4p0.y - n_out12p0) - sin(n_out8p0) * (n_out4p0.x - n_out12p0) + n_out12p0)+n_out14p0,0);
	}

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out7p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 181.167, -364.667 )
modes/depth_draw = 3
nodes/fragment/0/position = Vector2( 1440, 100 )
nodes/fragment/2/node = SubResource( 11 )
nodes/fragment/2/position = Vector2( 500, 80 )
nodes/fragment/4/node = SubResource( 13 )
nodes/fragment/4/position = Vector2( -1220, 180 )
nodes/fragment/7/node = SubResource( 14 )
nodes/fragment/7/position = Vector2( -520, 120 )
nodes/fragment/7/size = Vector2( 849, 693.5 )
nodes/fragment/7/input_ports = "0,1,uv;1,0,rotation;2,0,mid_x;3,0,offset_x;4,0,offset_y;5,0,mid_y;6,0,scale_x;7,0,scale_y;"
nodes/fragment/7/output_ports = "0,1,new_uv;"
nodes/fragment/7/expression = "new_uv = vec3(
	scale_x * (cos(rotation) * (uv.x - mid_x) + sin(rotation) * (uv.y - mid_x) + mid_x)+offset_x,
	scale_y * (cos(rotation) * (uv.y - mid_y) - sin(rotation) * (uv.x - mid_y) + mid_y)+offset_y,0);"
nodes/fragment/8/node = SubResource( 15 )
nodes/fragment/8/position = Vector2( -840, 280 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( -840, 380 )
nodes/fragment/12/node = SubResource( 6 )
nodes/fragment/12/position = Vector2( -840, 480 )
nodes/fragment/13/node = SubResource( 7 )
nodes/fragment/13/position = Vector2( -820, 600 )
nodes/fragment/14/node = SubResource( 8 )
nodes/fragment/14/position = Vector2( -820, 700 )
nodes/fragment/15/node = SubResource( 9 )
nodes/fragment/15/position = Vector2( -820, 900 )
nodes/fragment/16/node = SubResource( 10 )
nodes/fragment/16/position = Vector2( -820, 800 )
nodes/fragment/17/node = SubResource( 17 )
nodes/fragment/17/position = Vector2( 964.25, 650.5 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 4, 0, 7, 0, 8, 0, 7, 1, 7, 0, 2, 0, 13, 0, 7, 3, 14, 0, 7, 4, 11, 0, 7, 2, 12, 0, 7, 5, 16, 0, 7, 6, 15, 0, 7, 7, 2, 1, 0, 1 )

[resource]
shader = SubResource( 16 )
