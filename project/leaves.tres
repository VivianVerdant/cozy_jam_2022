[gd_resource type="Shader" format=2]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.2.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_alpha_prepass,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);

uniform float noise_scale = 2.0;
uniform float speed = 20.0;
uniform sampler2D noise;
uniform float freqA = 1.0;
uniform float ampA = 1.0;
uniform float scaleA = 1.0;
uniform float blurA = 1.0;
uniform float freqB = 1.0;
uniform float ampB = 1.0; 
uniform float scaleB = 1.0;
uniform float blurB = 1.0;
uniform float freqC = 1.0;
uniform float ampC = 1.0; 
uniform float scaleC = 1.0;
uniform float blurC = 1.0;

varying vec3 VERTEX_WORLD;
varying vec2 iResolution;
varying float iTime;

vec2 distort(vec2 v,float time,float amp)
{
	float d1 = v.x/16.;
    float d2 = v.y/16.;
    d1 = sin(time + d1 * 15.05)/12.;
    d2 = sin(time + d2 * 14.05)/12.;
    vec2 dist = vec2(
    	sin(d1) * amp + cos(d1),
    	cos(d2) + sin(d2) * amp
    )*.2;
	return dist+v;
}

float leaves(vec2 fragCoord, float r,float freq,float amp,float scale,float blur_amount)
{
    vec2 map=fragCoord/iResolution.xy;
    float t=iTime*speed*freq+r;
    vec2 f=vec2(1,iResolution.y/iResolution.x)*(1.+r);
	vec2 m = distort(map*f,t,amp);
	float blurred_noise = textureLod(noise,m*scale*noise_scale,blur_amount).x;
    return blurred_noise;
}

void vertex() {
	ROUGHNESS=roughness;
	VERTEX_WORLD = 2.*( WORLD_MATRIX * vec4( VERTEX, 1.0 ) ).xzy;
	VERTEX.xz = VERTEX.xz + (sin(TIME*.66666) * cos(TIME*0.33333+VERTEX_WORLD.xz*3.) * sin(TIME+VERTEX_WORLD.xz*50.))/50.;
	iResolution = VIEWPORT_SIZE;
	iTime = TIME;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,UV);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	
	float buffer = leaves(VERTEX_WORLD.xy,1.5,freqA,ampA,scaleA,blurA)/20.+.5;
	buffer = leaves(VERTEX_WORLD.xy,1.4,freqB,ampB,scaleB,blurB)/20. + buffer;
	buffer = leaves(VERTEX_WORLD.xy,1.6,freqC,ampC,scaleC,blurC)/20. + buffer;
	
	
	ALBEDO *= (vec3(buffer)-.5)*16.+.5;
	ALPHA = albedo_tex.a;
}
"
